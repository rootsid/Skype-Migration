from django.shortcuts import render
from django.http import HttpResponse, HttpResponseRedirect
from django.urls import reverse
from tutorial.auth_helper import get_sign_in_url, get_token_from_code, store_token, store_user, remove_user_and_token, \
    get_token
from tutorial.graph_helper import get_user, get_calendar_events, schedule_meeting
import dateutil.parser
from _datetime import datetime


def initialize_context(request):
    context = {}

    # Check for any errors in the session
    error = request.session.pop('flash_error', None)

    if error != None:
        context['errors'] = []
        context['errors'].append(error)

        # Check for user in the session
    context['user'] = request.session.get('user', {'is_authenticated': False})
    return context


def home(request):
    context = initialize_context(request)
    return render(request, 'tutorial/home.html', context)


def sign_in(request):
    # Get the sign-in URL
    sign_in_url, state = get_sign_in_url()
    # Save the expected state so we can validate in the callback
    request.session['auth_state'] = state
    # Redirect to the Azure sign-in page
    return HttpResponseRedirect(sign_in_url)


# The signin action generates the Azure AD signin URL, saves the state value generated by the OAuth client, then redirects the browser to the Azure AD signin page.

# def callback(request):
#     # Getting the state saved in the session
#     expected_state = request.session.pop("auth.state", '')
#     # This is token request
#     token = get_token_from_code(request.get_full_path(), expected_state)
#     # Temporary save the response in an error so it;s displayed.
#     request.session['flash_error'] = {'message': 'Token retrieved', 'debug': format(token)}
#     return HttpResponseRedirect(reverse('home'))

# The callback action is where Azure redirects after the signin is complete. That action makes sure the state value matches the saved value, then uses the authorization code sent by Azure to request an access token. It then redirects back to the home page with the access token in the temporary error value. You'll use this to verify that our sign-in is working before moving on.

# def callback(request):
#     # Get the state saved in session
#     expected_state = request.session.pop('auth_state', '')
#     # Make the token request
#     token = get_token_from_code(request.get_full_path(), expected_state)
#
#     # Get the user's profile
#     user = get_user(token)
#     # Temporary! Save the response in an error so it's displayed
#     request.session['flash_error'] = {'message': 'Token retrieved',
#                                       'debug': 'User: {0}\nToken: {1}'.format(user, token)}
#     return HttpResponseRedirect(reverse('home'))

def callback(request):
    # Get the state saved in session
    expected_state = request.session.pop('auth_state', '')
    # Make the token request
    token = get_token_from_code(request.get_full_path(), expected_state)

    # Get the user's profile
    user = get_user(token)

    # Save token and user
    store_token(request, token)
    store_user(request, user)

    return HttpResponseRedirect(reverse('home'))


def sign_out(request):
    # Clear out the user and token
    remove_user_and_token(request)

    return HttpResponseRedirect(reverse('home'))


# def calendar(request):
#     context = initialize_context(request)
#
#     token = get_token(request)
#     events = get_calendar_events(token)
#     context['errors'] = [
#         {'message': 'Events', 'debug': format(events)}
#     ]
#     return render(request, 'tutorial/home.html', context)

def calendar(request):
    context = initialize_context(request)
    token = get_token(request)
    events = get_calendar_events(token)
    user = get_user(token)
    mail = user.get('mail')
    # meeting = schedule_meeting(token)
    # print(meeting)
    # print(user, '\n\n\n\n\n')

    if events:
        # Convert the ISO 8601 date times to a datetime object
        # This allows the Django template to format the value nicely
        count = 0

        for event in events['value']:
            start_key = event.get('start')
            start_key = start_key.get('dateTime')
            date_fixed = start_key.split('T')[0]
            date_fixed = datetime.strptime(date_fixed, '%Y-%m-%d')
            todays_date = datetime.today()
            organizer = event.get('organizer'); organizer = organizer.get('emailAddress'); organizer = organizer.get('address')
            # print(organizer, mail)
            # print(event)
            if mail == organizer:
                if todays_date > date_fixed:
                    event['start']['dateTime'] = dateutil.parser.parse(event['start']['dateTime'])
                    event['end']['dateTime'] = dateutil.parser.parse(event['end']['dateTime'])
                    count += 1
                context['events'] = events['value']
                pass
            else:
                if count < 1:
                    request.session['flash_error'] = {'message': 'No new meeting found by your name.','debug' : 'No new meetings.'}
                else :
                    event['subject'] = None
                    event['organizer'] = None

    return render(request, 'tutorial/calendar.html', context)

# def calendar(request):
#     context = initialize_context(request)
#     token = get_token(request)
#     calendars = get_calendar_events(token)
#
#     # print(calendars)
#     return render(request, 'tutorial/calendar.html')
